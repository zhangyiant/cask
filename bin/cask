#!/usr/bin/env python
# -*- coding: utf-8; -*-

# Copyright (C) 2012, 2013, 2014 Johan Andersson
# Copyright (C) 2013-2014, 2016 Sebastian Wiesner

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNU Emacs; see the file COPYING.  If not, write to the
# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301, USA.

"""Cask start script
=================

This script is the command line frontend to Cask.  Basically it just delegates
all commands to the Emacs Lisp implementation, with the exception of `exec`,
due to the lack of a corresponding function in Emacs.
"""


from __future__ import print_function, unicode_literals


import sys
import os
import re
import subprocess
import errno


# The Cask executable and directories
CASK = os.path.realpath(os.path.abspath(sys.argv[0]))
CASK_BIN_DIRECTORY = os.path.dirname(CASK)
CASK_DIRECTORY = os.path.dirname(CASK_BIN_DIRECTORY)


ENV = os.environ
ENVB = ENV


class MissingEmacsError(Exception):
    """An exception indicating that Emacs is missing.

    The ``emacs`` attribute has the name of the executable that was used to
    call Emacs.

    """

    def __init__(self, emacs):
        Exception.__init__(self)
        self.emacs = emacs


class EmacsCommandError(Exception):
    """An exception indicating a failed Emacs command.

    The ``command`` attribute has the failed command as list, as given to
    ``subprocess``, and the ``real_error`` attribute stores the underlying
    exception.

    """

    def __init__(self, command, real_error):
        Exception.__init__(self)
        self.command = command
        self.real_error = real_error


class ExecCommandError(Exception):
    """An exception indicating that ``cask exec`` failed.

    The ``command`` attribute has the command to be executed.  The
    ``real_error`` attribute holds the original exception.

    """

    def __init__(self, command, real_error):
        Exception.__init__(self)
        self.command = command
        self.real_error = real_error


def get_cask_path(kind):
    """Get the Cask package environment path of the given ``kind``.

    ``kind`` is a string, denoting the kind of the path to get.  Cask supports
    two different kinds, namely ``'path'`` for the executable path of the
    package environment, and ``'load-path'`` for the Emacs Lisp load path of
    the package environment.

    Return the path as string, which contains all directories of the path
    separated by path separators.

    """
    process = subprocess.Popen([sys.executable, CASK, kind], stdout=subprocess.PIPE)
    stdout, _ = process.communicate()
    return stdout.rstrip()


def get_emacs_from_env():
    """Get the Emacs executable as specified by the environment.

    Use the command given by the environment variable ``$CASK_EMACS`` if set.
    Failing that use ``$EMACS``, unless the value of this variable does not
    refer to a real Emacs executable (i.e. Cask is run from inside Emacs).

    """
    return (os.environ.get('CASK_EMACS') or
            os.environ.get('EMACS'))


def get_cask_emacs():
    """Get the Emacs executable to use for Cask.

    If an Emacs is defined by the environment (see ``get_emacs_from_env``) use
    that, or use 'emacs' directly.

    Return the name or path for the Emacs command Cask shall use as string.

    """
    emacs = get_emacs_from_env() or 'emacs'
    return emacs


def exec_command(command):
    """Execute a ``command`` with the proper Cask environment.

    ``command`` is a list of strings, containing the command to execute and its
    arguments.

    Set ``$PATH`` and ``$EMACSLOADPATH`` to include the Cask package
    environment, and execute ``command``.

    This function replaces the current process.  It does **not** return.

    """
    # Copy the environment and update the paths
    ENVB['EMACSLOADPATH'] = get_cask_path('load-path')
    ENVB['PATH'] = get_cask_path('path')

    # special handling for where we have a CASK_EMACS, we can use that and
    # pass it as the EMACS variable to the command
    if ('CASK_EMACS' in ENVB):
        ENVB['EMACS'] = ENVB['CASK_EMACS']

    try:
        os.execvp(command[0], command)
    except OSError as error:
        raise ExecCommandError(command, error)


def exec_emacs(command):
    """Execute Emacs with the proper Cask environment.

    ``command`` is a list of strings, containing the arguments to pass to the
    emacs process. The Emacs executable is choosen according to the normal
    rules (see ``get_cask_emacs``). Set ``$PATH`` and ``$EMACSLOADPATH`` to
    include the Cask package environment.

    This function replaces the current process.  It does **not** return.

    """
    exec_command([get_cask_emacs()] + command)


def exec_cask(arguments):
    """Execute the Cask CLI with the given ``arguments``.

    ``arguments`` is a list of strings, containing the arguments for Cask.

    Find the Emacs to use for Cask, and run the Cask CLI with the given
    ``arguments``.

    This function replaces the current process.  It does **not** return.

    """
    emacs = get_cask_emacs()
    cli = os.path.join(CASK_DIRECTORY, 'cask-cli.el')
    command = [emacs, '-Q', '--script', cli, '--'] + arguments
    os.execvp(command[0], command)


def exit_error(error):
    """Report an ``error`` and exit.

    ``error`` is a string, or an object representing an error, which provides a
    human-readable error description when stringified.

    Print a human-readable error message to standard error, and exit with
    return code 1.  See ``sys.exit``.

    """
    executable = os.path.basename(sys.argv[0])
    command = (' ' + sys.argv[1]) if len(sys.argv) > 1 else ''
    print('{0}{1}: error: {2}'.format(executable, command, error),
          file=sys.stderr)
    sys.exit(1)


def main():
    """Entry point.

    Partially parse arguments, and either execute commands within the Cask
    package environment, or delegate to the Cask CLI.

    """
    try:
        # Special handling for emacs on travis with evm and buggy pyenv, see
        # cask issue #399.
        if ENVB.get('TRAVIS', '') == 'true':
            paths = ENVB['PATH'].split(':')
            if len(paths) > 0 and paths[0] == '/usr/bin':
                ENVB['PATH'] = ':'.join(paths[1:])

        # TODO: replace with a command line parser!
        if len(sys.argv) > 1 and sys.argv[1] == 'exec':
            if len(sys.argv) == 2:
                exec_cask(['help'])
            else:
                exec_command(sys.argv[2:])
        elif len(sys.argv) > 1 and sys.argv[1] == 'emacs':
            exec_emacs(sys.argv[2:])
        else:
            exec_cask(sys.argv[1:])
    except OSError as error:
        exit_error(error)
    except MissingEmacsError as error:
        exit_error('Emacs does not exist at {0}.  Did you install Emacs?'.format(
            error.emacs))
    except EmacsCommandError as error:
        exit_error('Emacs command "{0}" failed: {1}'.format(
            error.command, error.real_error))
    except ExecCommandError as error:
        exit_error('Failed to execute {0}: {1}\n'
                   'Did you run cask install?'.format(
                       ' '.join(error.command), error.real_error))


if __name__ == '__main__':
    main()
